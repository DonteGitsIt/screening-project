{"version":3,"sources":["components/Search.js","components/Images.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","className","children","Images","src","imgUrl","alt","API","searchPhotos","query","Unsplash","applicationId","secret","search","photos","then","toJson","App","state","searchParam","searchResults","imageSearched","handleInputChange","event","value","target","name","_this","setState","Object","defineProperty","handleSearchSubmit","preventDefault","console","log","json","i","results","length","result","id","alt_description","url","urls","regular","push","catch","err","components_Search","this","onChange","type","placeholder","onClick","map","components_Images","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQAeeA,MAZf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVJ,EAAMK,WCSJC,MAZX,SAAiBN,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,OAAQC,IAAKT,EAAMS,wBCCpCC,EAAA,CAEXC,aAAc,SAAUC,GAOpB,OALiB,IAAIC,IAAS,CAC1BC,cAAe,mEACfC,OAAQ,qEAICC,OAAOC,OAAOL,EAAO,EAAG,IAChCM,KAAKC,YCkFHC,oNA5FbC,MAAQ,CACNC,YAAa,GACbC,cAAe,GACfC,eAAe,KAGjBC,kBAAoB,SAAAC,GAElB,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KAE1BC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGH,EAAOF,OAIZO,mBAAqB,SAAAR,GAEnBA,EAAMS,iBACNL,EAAKC,SACH,CACER,cAAe,KAGnBa,QAAQC,IAAI,kBAEZ3B,EAAIC,aAAamB,EAAKT,MAAMC,aACzBJ,KAAK,SAACoB,GAEL,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,QAAQC,OAAQF,IAAK,CAC5C,IAAIG,EAAS,CACXC,GAAIL,EAAKE,QAAQD,GAAGI,GACpBlC,IAAK6B,EAAKE,QAAQD,GAAGK,gBACrBC,IAAKP,EAAKE,QAAQD,GAAGO,KAAKC,SAG5BjB,EAAKT,MAAME,cAAcyB,KAAKN,GAC9BZ,EAAKC,SAAS,CACZP,eAAe,IAEjBY,QAAQC,IAAI,0BAEdD,QAAQC,IAAIP,EAAKT,MAAME,iBAExB0B,MAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,8EAM5B,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACdH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SACEwB,MAAOyB,KAAK/B,MAAMC,YAClBO,KAAK,cACLwB,SAAUD,KAAK3B,kBACf6B,KAAK,OACLC,YAAY,kBAEdtD,EAAAC,EAAAC,cAAA,UAAQqD,QAASJ,KAAKlB,oBAAtB,YAIFkB,KAAK/B,MAAME,cAAckB,OAAS,IAAkC,IAA7BW,KAAK/B,MAAMG,cAChD4B,KAAK/B,MAAME,cAAckC,IAAI,SAAAf,GAC3B,OACEzC,EAAAC,EAAAC,cAACuD,EAAD,CACEC,IAAKjB,EAAOC,GACZnC,OAAQkC,EAAOG,IACfpC,IAAKiC,EAAOjC,QAQlBR,EAAAC,EAAAC,cAAA,oBAlFMyD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.82b6cd59.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Search(props) {\n    return (\n        <div className=\"searchContainer\">\n            {props.children}\n        </div>\n    )\n}\n\n\n\n\n\nexport default Search;","import React from 'react';\n\n\n    function Images (props){\n        return (\n            <div className=\"imageContainer\">\n                <img src={props.imgUrl} alt={props.alt}/>\n            </div>\n        )\n    }\n        \n\n    \n\n\nexport default Images;","\nimport Unsplash, { toJson } from 'unsplash-js';\n\n\n\n\n\nexport default {\n    \n    searchPhotos: function (query) {\n        \n        const unsplash = new Unsplash({\n            applicationId: \"bb871877d7dd496d178345e41cf031344afee1d6577a8a14ce45275a1ff3af83\",\n            secret: \"f733ef14cab890492b552f23a082e3d50515268ebd83a1a49663c6e9ad7de02c\"\n        });\n        \n        return(\n            unsplash.search.photos(query, 1, 25)\n            .then(toJson)\n        )\n        \n            \n    }\n}","import React, { Component } from 'react';\nimport Search from './components/Search'\nimport Images from './components/Images'\nimport API from './utils/API'\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    searchParam: \"\",\n    searchResults: [],\n    imageSearched: false\n  };\n\n  handleInputChange = event => {\n\n    const value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSearchSubmit = event => {\n\n    event.preventDefault();\n    this.setState(\n      {\n        searchResults: []\n      }\n    )\n    console.log(\"Search worked!\")\n\n    API.searchPhotos(this.state.searchParam)\n      .then((json) => {\n\n        for (let i = 0; i < json.results.length; i++) {\n          var result = {\n            id: json.results[i].id,\n            alt: json.results[i].alt_description,\n            url: json.results[i].urls.regular\n          }\n\n          this.state.searchResults.push(result)\n          this.setState({\n            imageSearched: true\n          })\n          console.log(\"result pushed to array\")\n        }\n        console.log(this.state.searchResults)\n      })\n      .catch(err => console.log(err))\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search>\n          <form className=\"search\">\n            <h2>Unplash Image Finder</h2>\n            <input\n              value={this.state.searchParam}\n              name=\"searchParam\"\n              onChange={this.handleInputChange}\n              type=\"text\"\n              placeholder=\"Search images\"\n            />\n            <button onClick={this.handleSearchSubmit}>Search</button>\n          </form>\n        </Search>\n        {\n          this.state.searchResults.length > 0 && this.state.imageSearched === true ?\n            this.state.searchResults.map(result => {\n              return (\n                <Images\n                  key={result.id}\n                  imgUrl={result.url}\n                  alt={result.alt}\n                >\n\n                </Images>\n              )\n            })\n\n            :\n            <div></div>\n            \n        }\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}